import {
  UploadOutlined,
  DeleteOutlined,
  EyeOutlined,
  RotateRightOutlined,
} from "@ant-design/icons";
import {
  Button,
  Form,
  Input,
  Modal,
  Upload,
  Typography,
  Space,
  Popconfirm,
  message,
} from "antd";
import axios from "axios";
import React, { useState } from "react";
import { server } from "../../config";

const { Text } = Typography;

/**
 * –§—É–Ω–∫—Ü–∏—è: —Å—á–∏—Ç–∞—Ç—å –∏–∑ File –ø–µ—Ä–≤—ã–µ 64 –ö–ë, —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å EXIF‚Äê–±–ª–æ–∫ –∏ –≤–µ—Ä–Ω—É—Ç—å tag Orientation (1, 3, 6, 8 –∏–ª–∏ -1).
 * @param {File} file
 * @param {(orientation: number) => void} callback
 */
function getOrientation(file, callback) {
  const reader = new FileReader();
  // –ß–∏—Ç–∞–µ–º 64 –ö–ë (–Ω–µ –≤–µ—Å—å —Ñ–∞–π–ª, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ)
  const blob = file.slice(0, 64 * 1024);
  reader.onload = function (e) {
    const view = new DataView(e.target.result);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º JPEG SOI
    if (view.getUint16(0, false) !== 0xffd8) {
      return callback(-2);
    }
    let length = view.byteLength;
    let offset = 2;
    while (offset < length) {
      const marker = view.getUint16(offset, false);
      offset += 2;
      if (marker === 0xffe1) {
        // APP1 marker –Ω–∞–π–¥–µ–Ω
        const exifLength = view.getUint16(offset, false);
        offset += 2;
        if (view.getUint32(offset, false) !== 0x45786966) {
          // ‚ÄúExif‚Äù –Ω–µ –Ω–∞–π–¥–µ–Ω
          return callback(-1);
        }
        offset += 6;
        const little = view.getUint16(offset, false) === 0x4949; // II ‚Äì little endian
        offset += view.getUint32(offset + 4, little);
        const tags = view.getUint16(offset, little);
        offset += 2;
        for (let i = 0; i < tags; i++) {
          const tagOffset = offset + i * 12;
          const tag = view.getUint16(tagOffset, little);
          if (tag === 0x0112) {
            // Orientation
            const orientation = view.getUint16(tagOffset + 8, little);
            return callback(orientation);
          }
        }
      } else if ((marker & 0xff00) !== 0xff00) {
        break;
      } else {
        offset += view.getUint16(offset, false);
      }
    }
    return callback(-1);
  };
  reader.readAsArrayBuffer(blob);
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞: File ‚Üí dataURL (–¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
 * @param {File} file
 * @returns {Promise<string>} dataURL
 */
const fileToDataURL = (file) =>
  new Promise((resolve, reject) => {
    const fr = new FileReader();
    fr.onload = (e) => resolve(e.target.result);
    fr.onerror = () => reject();
    fr.readAsDataURL(file);
  });

/**
 * –£—Ç–∏–ª–∏—Ç–∞: –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É (dataURL ‚Üí <canvas> ‚Üí blob) –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —É–≥–æ–ª (90|180|270)
 * –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π File + –µ–≥–æ blobURL.
 * @param {string} origDataUrl
 * @param {File} origFile
 * @param {number} angle (90|180|270)
 * @returns {Promise<{ file: File, thumbUrl: string }>}
 */
const rotateImageBlob = async (origDataUrl, origFile, angle) => {
  const img = await new Promise((res) => {
    const i = new Image();
    i.onload = () => res(i);
    i.src = origDataUrl;
  });

  const radians = (angle * Math.PI) / 180;
  const sin = Math.sin(radians);
  const cos = Math.cos(radians);

  const w = img.width;
  const h = img.height;

  let canvas = document.createElement("canvas");
  let ctx = canvas.getContext("2d");

  // –ï—Å–ª–∏ —É–≥–æ–ª 90 –∏–ª–∏ 270, –Ω–∞–¥–æ –ø–æ–º–µ–Ω—è—Ç—å —à–∏—Ä–∏–Ω—É/–≤—ã—Å–æ—Ç—É canvas
  if (angle === 90 || angle === 270) {
    canvas.width = h;
    canvas.height = w;
  } else {
    canvas.width = w;
    canvas.height = h;
  }

  ctx.translate(canvas.width / 2, canvas.height / 2);
  ctx.rotate(radians);
  ctx.drawImage(img, -w / 2, -h / 2);

  return new Promise((resolve) => {
    canvas.toBlob(
      (blob) => {
        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π File —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º –∏ —Ç–∏–ø–æ–º
        const rotatedFile = new File([blob], origFile.name, {
          type: origFile.type,
        });
        const url = URL.createObjectURL(rotatedFile);
        resolve({ file: rotatedFile, thumbUrl: url });
      },
      origFile.type,
      0.9
    );
  });
};

export default function ButtonAddStep({
  idContract,
  countSteps,
  updateContract,
  contractCompleted,
}) {
  const [form] = Form.useForm();
  const jwt = localStorage.getItem("jwt");
  const [msg, contextHolder] = message.useMessage();

  const [open, setOpen] = useState(false);
  const [sending, setSending] = useState(false);

  /**
   * items: –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª:
   * [{ uid: string, file: File, thumbUrl: string, rotated: boolean }, ‚Ä¶]
   */
  const [items, setItems] = useState([]);

  const MAX_TOTAL_SIZE = 20 * 1024 * 1024; // 20 –ú–ë
  const ALLOWED_RE = /\.(jpe?g|png)$/i;

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Upload Props ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

  const uploadProps = {
    multiple: true,
    accept: ".jpg,.jpeg,.png",
    showUploadList: false,
    beforeUpload: async (rawFile) => {
      // 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
      if (!ALLOWED_RE.test(rawFile.name)) {
        msg.error("–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∞: jpg, jpeg, png");
        return Upload.LIST_IGNORE;
      }

      // 2) –ü–æ–ª—É—á–∞–µ–º dataURL –¥–ª—è –ø—Ä–µ–≤—å—é
      let dataUrl;
      try {
        dataUrl = await fileToDataURL(rawFile);
      } catch {
        msg.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª");
        return Upload.LIST_IGNORE;
      }

      // 3) –û–ø—Ä–µ–¥–µ–ª—è–µ–º EXIF-–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
      getOrientation(rawFile, async (orientation) => {
        let finalFile = rawFile;
        let finalThumb = dataUrl;
        let autoRotated = false;

        if (orientation === 3) {
          // ¬´–≤–≤–µ—Ä—Ö –Ω–æ–≥–∞–º–∏¬ª ‚Üí 180¬∞
          const { file, thumbUrl } = await rotateImageBlob(
            dataUrl,
            rawFile,
            180
          );
          finalFile = file;
          finalThumb = thumbUrl;
          autoRotated = true;
          console.log(`‚úÖ ${rawFile.name} ‚Äî –ø–æ–≤—ë—Ä–Ω—É—Ç–æ –Ω–∞ 180¬∞ (EXIF=3)`);
        } else if (orientation === 6) {
          // –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90¬∞
          const { file, thumbUrl } = await rotateImageBlob(
            dataUrl,
            rawFile,
            90
          );
          finalFile = file;
          finalThumb = thumbUrl;
          autoRotated = true;
          console.log(`‚úÖ ${rawFile.name} ‚Äî –ø–æ–≤—ë—Ä–Ω—É—Ç–æ –Ω–∞ 90¬∞ (EXIF=6)`);
        } else if (orientation === 8) {
          // –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ 270¬∞
          const { file, thumbUrl } = await rotateImageBlob(
            dataUrl,
            rawFile,
            270
          );
          finalFile = file;
          finalThumb = thumbUrl;
          autoRotated = true;
          console.log(`‚úÖ ${rawFile.name} ‚Äî –ø–æ–≤—ë—Ä–Ω—É—Ç–æ –Ω–∞ 270¬∞ (EXIF=8)`);
        } else {
          // orientation = 1 –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ‚Üí –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
        }

        // 4) –î–æ–±–∞–≤–ª—è–µ–º –≤ items
        const uid = crypto.randomUUID();
        setItems((prev) => [
          ...prev,
          { uid, file: finalFile, thumbUrl: finalThumb, rotated: autoRotated },
        ]);
      });

      // –ê–Ω—Ç Upload –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º LIST_IGNORE
      return Upload.LIST_IGNORE;
    },
  };

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–∫–∞–∑–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å/–ø–æ–≤–µ—Ä–Ω—É—Ç—å/–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

  // –†—É—á–Ω–æ–π –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ +90¬∞
  const rotateManual = async (it) => {
    const { file: newFile, thumbUrl: newThumb } = await rotateImageBlob(
      it.thumbUrl,
      it.file,
      90
    );
    console.log(`üîÑ ${it.file.name} ‚Äî –ø–æ–≤—ë—Ä–Ω—É—Ç–æ –≤—Ä—É—á–Ω—É—é –Ω–∞ 90¬∞`);
    setItems((prev) =>
      prev.map((x) =>
        x.uid === it.uid
          ? { uid: x.uid, file: newFile, thumbUrl: newThumb, rotated: true }
          : x
      )
    );
  };

  // –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
  const removeItem = (uid) => {
    setItems((prev) => prev.filter((x) => x.uid !== uid));
  };

  // –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
  const previewImage = (it) => {
    window.open(it.thumbUrl, "_blank");
  };


  const onFinish = async (values) => {
    if (!items.length) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º–∞—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    const totalSize = items.reduce((sum, x) => sum + x.file.size, 0);
    if (totalSize > MAX_TOTAL_SIZE) {
      return msg.error("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ —Å—É–º–º–∞—Ä–Ω–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 –ú–ë");
    }

    const formData = new FormData();
    items.forEach((x) => formData.append("files", x.file));

    setSending(true);
    try {
      // 1) –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const uploadRes = await axios.post(`${server}/api/upload`, formData, {
        headers: { Authorization: `Bearer ${jwt}` },
      });

      // 2) –°–æ–∑–¥–∞—ë–º —à–∞–≥ (—à–∞–≥ ‚Üí —Ñ–æ—Ç–æ IDs –∏–∑ uploadRes)
      await axios.post(
        `${server}/api/steps`,
        {
          data: {
            name: values.name,
            description: values.description,
            contract: idContract,
            photos: uploadRes.data.map((item) => item.id),
          },
        },
        {
          headers: { Authorization: `Bearer ${jwt}` },
        }
      );

      // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setItems([]);
      setOpen(false);
      form.resetFields();
      updateContract();
    } catch (err) {
      console.error(err);
      msg.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ø");
    } finally {
      setSending(false);
    }
  };


  const MiniThumb = ({ it }) => (
    <div
      style={{
        display: "flex",
        alignItems: "center",
        border: "1px solid #d9d9d9",
        borderRadius: 6,
        padding: 8,
        marginBottom: 8,
      }}
    >
      <img
        src={it.thumbUrl}
        alt={it.file.name}
        style={{
          height: 60,
          maxWidth: 90,
          objectFit: "cover",
          borderRadius: 4,
        }}
      />
      <div
        style={{
          flex: 1,
          marginLeft: 12,
          overflow: "hidden",
          textOverflow: "ellipsis",
          whiteSpace: "nowrap",
        }}
      >
        {it.file.name}
      </div>
      <Space size="small">
        <EyeOutlined
          onClick={() => previewImage(it)}
          style={{ cursor: "pointer", color: "#555" }}
          title="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω–æ—Ä–∞–∑–º–µ—Ä–Ω–æ"
        />
        <RotateRightOutlined
          onClick={() => rotateManual(it)}
          style={{ cursor: "pointer", color: "#555" }}
          title="–ü–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ 90¬∞"
        />
        <DeleteOutlined
          onClick={() => removeItem(it.uid)}
          style={{ cursor: "pointer", color: "#ff4d4f" }}
          title="–£–¥–∞–ª–∏—Ç—å"
        />
      </Space>
    </div>
  );

  return (
    <>
      {contextHolder}
      <Button
        type="primary"
        disabled={contractCompleted}
        onClick={() => setOpen(true)}
      >
        {contractCompleted
          ? "–í –∞—Ä—Ö–∏–≤–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ø"
          : "–î–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —ç—Ç–∞–ø"}
      </Button>

      <Modal
        open={open}
        title="–î–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —ç—Ç–∞–ø"
        onCancel={() => setOpen(false)}
        footer={null}
        destroyOnClose
        width={640}
      >
        <Form form={form} layout="vertical" onFinish={onFinish}>
          {/* –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ */}
          <Form.Item
            label="–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞"
            name="name"
            rules={[{ required: true, message: "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞" }]}
            initialValue={`–≠—Ç–∞–ø ‚Ññ${countSteps + 1}`}
          >
            <Input />
          </Form.Item>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <Form.Item label="–û–ø–∏—Å–∞–Ω–∏–µ" name="description">
            <Input.TextArea autoSize />
          </Form.Item>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö */}
          <div style={{ marginBottom: 12 }}>
            <Text style={{ color: "#999", fontSize: 12 }}>
              –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ —Å—É–º–º–∞—Ä–Ω–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å
              <Text style={{ color: "#8f0000", fontWeight: 600 }}>20 –ú–ë</Text>
            </Text>
            <br />
            <Text style={{ color: "#999", fontSize: 12 }}>
              –î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∞:
              <Text style={{ color: "#8f0000", fontWeight: 600 }}>
                jpg,
              </Text>{" "}
              <Text style={{ color: "#8f0000", fontWeight: 600 }}>jpeg,</Text>{" "}
              <Text style={{ color: "#8f0000", fontWeight: 600 }}>png</Text>
            </Text>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ ‚Äú–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏‚Äù */}
          <Upload {...uploadProps}>
            <Button icon={<UploadOutlined />} style={{ marginBottom: 12 }}>
              –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            </Button>
          </Upload>

          {/* –°–ø–∏—Å–æ–∫ –º–∏–Ω–∏–∞—Ç—é—Ä */}
          <div
            style={{
              maxHeight: 240,
              overflowY: "auto",
              marginTop: 8,
              paddingRight: 4,
            }}
          >
            {items.map((it) => (
              <MiniThumb key={it.uid} it={it} />
            ))}
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ ‚Äú–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ø‚Äù */}
          <Popconfirm
            title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–∞–ø?"
            okText="–î–æ–±–∞–≤–∏—Ç—å"
            cancelText="–û—Ç–º–µ–Ω–∞"
            onConfirm={() => form.submit()}
          >
            <Button
              type="primary"
              block
              style={{ marginTop: 16 }}
              disabled={!items.length}
              loading={sending}
            >
              –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ø
            </Button>
          </Popconfirm>
        </Form>
      </Modal>
    </>
  );
}

// import { UploadOutlined } from "@ant-design/icons";
// import {
//   Button,
//   Form,
//   Input,
//   Modal,
//   Upload,
//   Typography,
//   Flex,
//   Popconfirm,
//   message,
// } from "antd";
// import axios from "axios";
// import React, { useState } from "react";
// import { server } from "../../config";
// const { Text } = Typography;

// // function getCookie(name) {
// //     var matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
// //     return matches ? decodeURIComponent(matches[1]) : undefined;
// // }

// export default function ButtonAddStep({
//   idContract,
//   countSteps,
//   updateContract,
//   contractCompleted,
// }) {
//   const [form] = Form.useForm();
//   const jwt = localStorage.getItem("jwt");
//   // console.log(countSteps);
//   const [messageApi, contextHolder] = message.useMessage();
//   const [isModalOpen, setIsModalOpen] = useState(false);
//   const [fileList, setFileList] = useState([]);
//   const [uploading, setUploading] = useState(false);
//   async function handleUpload(values) {
//     let summa = fileList.reduce((sum, current) => sum + current.size, 0);
//     if (summa > 20 * 1024 * 1024) {
//       return messageApi.open({
//         type: "error",
//         content: "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20–ú–ë",
//       });
//     }
//     // console.log("values", values)
//     const formData = new FormData();
//     fileList.forEach((file) => {
//       formData.append("files", file);
//     });
//     setUploading(true);
//     try {
//       const files = await axios.post(server + "/api/upload", formData, {
//         headers: {
//           Authorization: `Bearer ${jwt}`,
//         },
//       });
//       console.log("idContract", idContract);
//       if (files && files.data.length > 0) {
//         const newStep = await axios.post(
//           server + "/api/steps",
//           {
//             data: {
//               name: values.name,
//               contract: idContract,
//               // number: values.number,
//               description: values.description,
//               photos: files.data?.map((item) => item.id),
//             },
//           },
//           {
//             headers: {
//               Authorization: `Bearer ${jwt}`,
//             },
//           }
//         );
//         if (newStep) {
//           // console.log("newStep", newStep);
//           setFileList([]);
//           setIsModalOpen(false);
//           form.resetFields();
//           updateContract();
//         } else {
//           throw new Error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞");
//         }
//       } else {
//         throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤");
//       }
//       // message.success('upload successfully.');
//     } catch (error) {
//       console.log("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞: ", error);
//     }

//     setUploading(false);
//   }

//   const showModal = () => {
//     setIsModalOpen(true);
//   };

//   const handleOk = () => {
//     setIsModalOpen(false);
//   };

//   const handleCancel = () => {
//     setIsModalOpen(false);
//   };
//   const props = {
//     onRemove: (file) => {
//       const index = fileList.indexOf(file);
//       const newFileList = fileList.slice();
//       newFileList.splice(index, 1);
//       setFileList(newFileList);
//     },
//     beforeUpload: (file) => {
//       console.log("file", file);
//       setFileList((prev) => [...prev, file]);
//       return false;
//     },
//     fileList,
//   };
//   return (
//     <>
//       {contextHolder}
//       <Button type="primary" onClick={showModal} disabled={contractCompleted}>
//         {contractCompleted
//           ? "–í –∞—Ä—Ö–∏–≤–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ø"
//           : "–î–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —ç—Ç–∞–ø"}
//       </Button>
//       <Modal
//         title="–î–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —ç—Ç–∞–ø"
//         open={isModalOpen}
//         onOk={handleOk}
//         onCancel={handleCancel}
//         footer={false}
//       >
//         <Form
//           form={form}
//           onFinish={handleUpload}
//           labelCol={{ span: 8 }}
//           wrapperCol={{ span: 16 }}
//           style={{ maxWidth: 600 }}
//         >
//           {/* <Form.Item
//                         name='number'
//                         label="–ù–æ–º–µ—Ä —ç—Ç–∞–ø–∞"
//                         required
//                         initialValue={countSteps + 1}
//                     >
//                         <InputNumber />
//                     </Form.Item> */}
//           <Form.Item
//             name="name"
//             label="–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞"
//             required
//             initialValue={`–≠—Ç–∞–ø ‚Ññ${countSteps + 1}`}
//           >
//             <Input />
//           </Form.Item>
//           <Form.Item name="description" label="–û–ø–∏—Å–∞–Ω–∏–µ">
//             <Input.TextArea />
//           </Form.Item>
//           <Flex justify="end">
//             <Text style={{ color: "#999", fontSize: 12 }}>
//               –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ —Å—É–º–º–∞—Ä–Ω–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å{" "}
//               <span style={{ color: "#8f0000", fontWeight: 600 }}>20–ú–ë</span>
//             </Text>
//           </Flex>
//           <Flex justify="end">
//             <Text style={{ color: "#999", fontSize: 12 }}>
//               –î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∞:{" "}
//               <span style={{ color: "#8f0000", fontWeight: 600 }}>jpg,</span>
//               <span style={{ color: "#8f0000", fontWeight: 600 }}>jpeg,</span>
//               <span style={{ color: "#8f0000", fontWeight: 600 }}>png,</span>
//             </Text>
//           </Flex>
//           <Upload {...props} multiple accept=".jpg,.jpeg,.png">
//             <Button icon={<UploadOutlined />}>–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</Button>
//           </Upload>
//           <Popconfirm
//             title="–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ø"
//             description={
//               <Flex vertical>
//                 <Text>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!</Text>
//                 <Text style={{ color: "#8f0000", fontWeight: 600 }}>
//                   –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö –Ω–µ–ª—å–∑—è.
//                 </Text>
//               </Flex>
//             }
//             onConfirm={() => {
//               form.submit();
//             }}
//             // onCancel={cancel}
//             okText="–î–æ–±–∞–≤–∏—Ç—å"
//             cancelText="–ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å"
//           >
//             <Button
//               type="primary"
//               // htmlType='submit'
//               disabled={fileList.length === 0}
//               loading={uploading}
//               style={{ marginTop: 16 }}
//             >
//               {uploading ? "–î–æ–±–∞–≤–ª—è–µ—Ç—Å—è..." : "–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ø"}
//             </Button>
//           </Popconfirm>
//         </Form>
//       </Modal>
//     </>
//   );
// }
